#!/usr/bin/env python3
"""CleanDrive dev-server"""

import os
import json
import asyncio
import logging
from datetime import datetime
from aiohttp import web, ClientSession
from aiohttp.web_fileresponse import FileResponse
from aiohttp_cors import setup as setup_cors
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv('.env.local')
load_dotenv('.env')

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
TELEGRAM_CHAT_ID = os.getenv('TELEGRAM_CHAT_ID')
PORT = int(os.getenv('DEV_PORT', 3000))

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –∑–∞—è–≤–æ–∫ –≤ –ø–∞–º—è—Ç–∏
leads_storage = []

class DevServer:
    def __init__(self):
        self.app = web.Application()
        self.setup_routes()
        self.setup_cors()
        
    def setup_routes(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∞—Ä—à—Ä—É—Ç–æ–≤"""
        # API –º–∞—Ä—à—Ä—É—Ç—ã
        self.app.router.add_post('/lead', self.handle_lead)
        self.app.router.add_get('/api/leads', self.get_leads)
        self.app.router.add_get('/api/stats', self.get_stats)
        
        # –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
        self.app.router.add_get('/', self.serve_index)
        self.app.router.add_get('/admin', self.serve_admin)
        self.app.router.add_get('/thank-you', self.serve_thank_you)
        self.app.router.add_static('/', path='.', show_index=False)
        
    def setup_cors(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS"""
        from aiohttp_cors import ResourceOptions
        
        cors = setup_cors(self.app, defaults={
            "*": ResourceOptions(
                allow_credentials=True,
                expose_headers="*",
                allow_headers="*",
                allow_methods="*"
            )
        })
        
        # –î–æ–±–∞–≤–ª—è–µ–º CORS –∫–æ –≤—Å–µ–º –º–∞—Ä—à—Ä—É—Ç–∞–º
        for route in list(self.app.router.routes()):
            cors.add(route)
    
    async def serve_index(self, request):
        """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
        return FileResponse('index.html')
    
    async def serve_admin(self, request):
        """–ê–¥–º–∏–Ω–∫–∞"""
        return FileResponse('admin.html')
        
    async def serve_thank_you(self, request):
        """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏ (–±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞ –ø–æ–∑–∂–µ)"""
        return FileResponse('thank-you.html')
    
    async def handle_lead(self, request):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—è–≤–æ–∫"""
        try:
            data = await request.json()
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
            name = data.get('name', '').strip()
            phone = data.get('phone', '').strip()
            
            if not name or not phone:
                return web.json_response({
                    'success': False,
                    'message': '–ò–º—è –∏ —Ç–µ–ª–µ—Ñ–æ–Ω –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã'
                }, status=400)
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É
            lead = {
                'id': len(leads_storage) + 1,
                'name': name,
                'phone': phone,
                'timestamp': datetime.now().isoformat(),
                'date': datetime.now().strftime('%d.%m.%Y %H:%M'),
                'ip': request.remote or 'unknown',
                'user_agent': request.headers.get('User-Agent', 'unknown')
            }
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–∞–º—è—Ç–∏
            leads_storage.append(lead)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
            await self.send_to_telegram(lead)
            
            logger.info(f"‚úÖ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –æ—Ç {name} ({phone})")
            
            return web.json_response({
                'success': True,
                'message': '–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞',
                'lead_id': lead['id']
            })
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞—è–≤–∫–∏: {e}")
            return web.json_response({
                'success': False,
                'message': '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
            }, status=500)
    
    async def send_to_telegram(self, lead):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram"""
        if not TELEGRAM_BOT_TOKEN or not TELEGRAM_CHAT_ID:
            logger.warning("‚ö†Ô∏è  Telegram –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            return
            
        message = f"""üöó –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ #{lead['id']}

üë§ –ò–º—è: {lead['name']}
üì± –¢–µ–ª–µ—Ñ–æ–Ω: {lead['phone']}
üïí –í—Ä–µ–º—è: {lead['date']}
üåê IP: {lead['ip']}

#–∑–∞—è–≤–∫–∞ #dev"""
        
        try:
            async with ClientSession() as session:
                url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
                payload = {
                    'chat_id': TELEGRAM_CHAT_ID,
                    'text': message,
                    'parse_mode': 'HTML'
                }
                
                async with session.post(url, json=payload) as response:
                    if response.status == 200:
                        logger.info(f"üì± –ó–∞—è–≤–∫–∞ #{lead['id']} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ Telegram")
                    else:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ Telegram API: {response.status}")
                        
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")
    
    async def get_leads(self, request):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞—è–≤–æ–∫"""
        return web.json_response({
            'success': True,
            'leads': leads_storage,
            'total': len(leads_storage)
        })
    
    async def get_stats(self, request):
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"""
        today = datetime.now().date()
        today_leads = [
            lead for lead in leads_storage 
            if datetime.fromisoformat(lead['timestamp']).date() == today
        ]
        
        return web.json_response({
            'success': True,
            'stats': {
                'total_leads': len(leads_storage),
                'today_leads': len(today_leads),
                'last_lead': leads_storage[-1] if leads_storage else None
            }
        })

def print_banner():
    """–ö—Ä–∞—Å–∏–≤—ã–π –±–∞–Ω–Ω–µ—Ä –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
    banner = f"""
‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ
‚îÇ        CleanDrive Dev Server           ‚îÇ
‚îÇ                                        ‚îÇ
‚îÇ  üåê –°–∞–π—Ç:     http://localhost:{PORT}     ‚îÇ
‚îÇ  ‚öôÔ∏è  –ê–¥–º–∏–Ω–∫–∞:  http://localhost:{PORT}/admin ‚îÇ
‚îÇ  üìä API:      http://localhost:{PORT}/api   ‚îÇ
‚îÇ                                        ‚îÇ
‚îÇ  üí° –†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∞–∫—Ç–∏–≤–µ–Ω           ‚îÇ
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ
"""
    print(banner)

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    server = DevServer()
    
    print_banner()
    logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ dev-server –Ω–∞ –ø–æ—Ä—Ç—É {PORT}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Telegram –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    if TELEGRAM_BOT_TOKEN and TELEGRAM_CHAT_ID:
        logger.info("üì± Telegram –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
    else:
        logger.warning("‚ö†Ô∏è  Telegram –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω (—Å–æ–∑–¥–∞–π—Ç–µ .env —Ñ–∞–π–ª)")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
    runner = web.AppRunner(server.app)
    await runner.setup()
    
    site = web.TCPSite(runner, 'localhost', PORT)
    await site.start()
    
    logger.info(f"‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω: http://localhost:{PORT}")
    
    # –î–µ—Ä–∂–∏–º —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–Ω—ã–º
    try:
        await asyncio.Event().wait()
    except KeyboardInterrupt:
        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞...")
    finally:
        await runner.cleanup()

if __name__ == '__main__':
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
