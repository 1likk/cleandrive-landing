#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
CleanDrive Telegram Bot
–ë–æ—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—è–≤–æ–∫
"""

import asyncio
import json
import logging
from datetime import datetime
from typing import Dict, Any

from telegram import Update, Bot
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from aiohttp import web
import aiohttp_cors

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

BOT_TOKEN = "7954963884:AAFOLEMMTEAN6YCi-Gb1gs8JOCy8ZByloYQ"
WEBHOOK_PORT = 3001
WEB_PORT = 3000
ADMIN_CHAT_ID = None  

class CleanDriveBot:
    def __init__(self):
        self.bot = Bot(token=BOT_TOKEN)
        self.app = Application.builder().token(BOT_TOKEN).build()
        self.admin_chat_id = 7099490320
        
        self.app.add_handler(CommandHandler("start", self.start_command))
        self.app.add_handler(CommandHandler("help", self.help_command))
        self.app.add_handler(CommandHandler("stats", self.stats_command))
        self.app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))

    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user = update.effective_user
        chat_id = update.effective_chat.id
        
        if self.admin_chat_id is None:
            self.admin_chat_id = chat_id
            logger.info(f"Admin chat ID —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {chat_id}")
        
        welcome_text = f"""
üöó –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ CleanDrive Bot!

–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã

–≠—Ç–æ—Ç –±–æ—Ç –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤–∞–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –∑–∞—è–≤–∫–∞—Ö —Å —Å–∞–π—Ç–∞ –∞–≤—Ç–æ–ø—ã–ª–µ—Å–æ—Å–∞ CleanDrive.

üÜî –í–∞—à Chat ID: `{chat_id}`
üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–æ—Ç ID –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö —Å–∞–π—Ç–∞

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/help - –ü–æ–º–æ—â—å
/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞—è–≤–æ–∫
        """
        
        await update.message.reply_text(welcome_text, parse_mode='Markdown')

    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        help_text = """
ü§ñ –ü–æ–º–æ—â—å –ø–æ CleanDrive Bot

üìã –ö–æ–º–∞–Ω–¥—ã:
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞—è–≤–æ–∫

üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞:
1. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –≤–∞—à Chat ID –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è /start
2. –í—Å—Ç–∞–≤—å—Ç–µ –µ–≥–æ –≤ –∫–æ–¥ —Å–∞–π—Ç–∞ (script.js)
3. –¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞—è–≤–∫–∞—Ö!

üìû –§–æ—Ä–º–∞—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:
üöó –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ CleanDrive!
üë§ –ò–º—è: [–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞]
üì± –¢–µ–ª–µ—Ñ–æ–Ω: [–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞]
üïí –í—Ä–µ–º—è: [–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è]

‚ùì –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ:
- –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å Bot Token
- –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å Chat ID
- –†–∞–±–æ—Ç—É –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞
        """
        
        await update.message.reply_text(help_text)

    async def stats_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        stats_text = f"""
üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ CleanDrive Bot

ü§ñ –ë–æ—Ç: –ê–∫—Ç–∏–≤–µ–Ω
üÜî Chat ID: {update.effective_chat.id}
üìÖ –°–µ–≥–æ–¥–Ω—è: {datetime.now().strftime('%d.%m.%Y %H:%M')}

üìã –§—É–Ω–∫—Ü–∏–∏:
‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞—è–≤–æ–∫ —Å —Å–∞–π—Ç–∞
‚úÖ –ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è  
‚úÖ –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫

üí° –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –∑–∞—è–≤–æ–∫ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É "üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞—è–≤–∫–∏" –Ω–∞ —Å–∞–π—Ç–µ.
        """
        
        await update.message.reply_text(stats_text)

    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        await update.message.reply_text(
            "üëã –Ø –±–æ—Ç –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –∑–∞—è–≤–∫–∞—Ö CleanDrive.\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏."
        )

    async def send_lead_notification(self, lead_data: Dict[str, Any]):
        if not self.admin_chat_id:
            logger.error("Admin chat ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
            return False

        try:
            message = f"""üöó –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ CleanDrive!

üë§ –ò–º—è: {lead_data.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
üì± –¢–µ–ª–µ—Ñ–æ–Ω: {lead_data.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω')}
üïí –í—Ä–µ–º—è: {lead_data.get('date', datetime.now().strftime('%d.%m.%Y %H:%M'))}
üåê –ò—Å—Ç–æ—á–Ω–∏–∫: {lead_data.get('source', '–°–∞–π—Ç')}

üîó <a href="tel:{lead_data.get('phone', '')}">–ü–æ–∑–≤–æ–Ω–∏—Ç—å –∫–ª–∏–µ–Ω—Ç—É</a>

#–Ω–æ–≤–∞—è_–∑–∞—è–≤–∫–∞ #cleandrive"""

            await self.bot.send_message(
                chat_id=self.admin_chat_id,
                text=message,
                parse_mode='HTML'
            )
            
            logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {lead_data}")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
            return False


async def handle_lead(request):
    try:
        data = await request.json()
        
        required_fields = ['name', 'phone']
        for field in required_fields:
            if field not in data or not data[field].strip():
                return web.json_response(
                    {'error': f'–ü–æ–ª–µ {field} –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ'},
                    status=400
                )
        
        data['timestamp'] = datetime.now().isoformat()
        data['date'] = datetime.now().strftime('%d.%m.%Y %H:%M:%S')
        data['source'] = 'CleanDrive Website'
        
        bot_instance = request.app['bot']
        success = await bot_instance.send_lead_notification(data)
        
        if success:
            return web.json_response({
                'success': True,
                'message': '–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞'
            })
        else:
            return web.json_response({
                'success': False,
                'message': '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram'
            }, status=500)
            
    except json.JSONDecodeError:
        return web.json_response(
            {'error': '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç JSON'},
            status=400
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞—è–≤–∫–∏: {e}")
        return web.json_response(
            {'error': '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'},
            status=500
        )

async def handle_test(request):
    return web.json_response({
        'status': 'OK',
        'message': 'CleanDrive Bot Server —Ä–∞–±–æ—Ç–∞–µ—Ç!',
        'timestamp': datetime.now().isoformat()
    })

async def create_web_app(bot_instance):
    app = web.Application()
    app['bot'] = bot_instance
    
    app.router.add_post('/lead', handle_lead)
    app.router.add_get('/test', handle_test)
    app.router.add_get('/health', handle_test)
    
    cors = aiohttp_cors.setup(app, defaults={
        "*": aiohttp_cors.ResourceOptions(
            allow_credentials=True,
            expose_headers="*",
            allow_headers="*",
            allow_methods="*"
        )
    })
    
    for route in list(app.router.routes()):
        cors.add(route)
    
    return app

async def main():
    logger.info("–ó–∞–ø—É—Å–∫ CleanDrive Bot...")
    
    bot_instance = CleanDriveBot()
    web_app = await create_web_app(bot_instance)
    
    runner = web.AppRunner(web_app)
    await runner.setup()
    site = web.TCPSite(runner, 'localhost', WEB_PORT)
    await site.start()
    
    logger.info(f"–í–µ–±-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:{WEB_PORT}")
    logger.info(f"API endpoint: http://localhost:{WEB_PORT}/lead")
    logger.info(f"Test endpoint: http://localhost:{WEB_PORT}/test")
    
    logger.info("–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
    await bot_instance.app.initialize()
    await bot_instance.app.start()
    
    logger.info("‚úÖ CleanDrive Bot –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–ø—É—â–µ–Ω!")
    logger.info("üìã –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è Chat ID –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start –±–æ—Ç—É –≤ Telegram")
    
    try:
        await bot_instance.app.updater.start_polling()
        
        while True:
            await asyncio.sleep(1)
        
    except KeyboardInterrupt:
        logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...")
    finally:
        await bot_instance.app.updater.stop()
        await bot_instance.app.stop()
        await runner.cleanup()
        logger.info("CleanDrive Bot –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

if __name__ == '__main__':
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüëã CleanDrive Bot –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
